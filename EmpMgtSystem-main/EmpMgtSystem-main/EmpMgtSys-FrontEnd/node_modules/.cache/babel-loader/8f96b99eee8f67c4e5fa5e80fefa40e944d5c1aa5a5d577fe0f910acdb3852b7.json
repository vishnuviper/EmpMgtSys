{"ast":null,"code":"import axios from \"axios\";\nconst EMPLOYEE_BASE_REST_API_URL = \"http://localhost:8080/api/v1/employees\";\nclass EmpServices {\n  // Fetch all employees\n  getAllEmployees() {\n    return axios.get(EMPLOYEE_BASE_REST_API_URL).then(response => response.data).catch(error => {\n      console.error(\"There was an error fetching the employees!\", error);\n      throw error;\n    });\n  }\n\n  // Fetch a specific employee by ID\n  getEmployeeById(employeeId) {\n    return axios.get(`${EMPLOYEE_BASE_REST_API_URL}/${employeeId}`).then(response => response.data).catch(error => {\n      console.error(`Error fetching employee with ID ${employeeId}`, error);\n      throw error;\n    });\n  }\n\n  // Add a new employee\n  addEmployee(employee) {\n    return axios.post(EMPLOYEE_BASE_REST_API_URL, employee).then(response => response.data).catch(error => {\n      console.error(\"Error adding a new employee\", error);\n      throw error;\n    });\n  }\n\n  // Update an existing employee\n  updateEmployee(employeeId, employee) {\n    return axios.put(`${EMPLOYEE_BASE_REST_API_URL}/${employeeId}`, employee).then(response => response.data).catch(error => {\n      console.error(`Error updating employee with ID ${employeeId}`, error);\n      throw error;\n    });\n  }\n\n  // Delete an employee by ID\n  deleteEmployee(employeeId) {\n    return axios.delete(`${EMPLOYEE_BASE_REST_API_URL}/${employeeId}`).then(response => response.data).catch(error => {\n      console.error(`Error deleting employee with ID ${employeeId}`, error);\n      throw error;\n    });\n  }\n}\nexport default new EmpServices();","map":{"version":3,"names":["axios","EMPLOYEE_BASE_REST_API_URL","EmpServices","getAllEmployees","get","then","response","data","catch","error","console","getEmployeeById","employeeId","addEmployee","employee","post","updateEmployee","put","deleteEmployee","delete"],"sources":["C:/r/my-react-app/src/services/EmpServices.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst EMPLOYEE_BASE_REST_API_URL = \"http://localhost:8080/api/v1/employees\";\r\n\r\nclass EmpServices {\r\n    // Fetch all employees\r\n    getAllEmployees() {\r\n        return axios.get(EMPLOYEE_BASE_REST_API_URL)\r\n            .then(response => response.data)\r\n            .catch(error => {\r\n                console.error(\"There was an error fetching the employees!\", error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // Fetch a specific employee by ID\r\n    getEmployeeById(employeeId) {\r\n        return axios.get(`${EMPLOYEE_BASE_REST_API_URL}/${employeeId}`)\r\n            .then(response => response.data)\r\n            .catch(error => {\r\n                console.error(`Error fetching employee with ID ${employeeId}`, error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // Add a new employee\r\n    addEmployee(employee) {\r\n        return axios.post(EMPLOYEE_BASE_REST_API_URL, employee)\r\n            .then(response => response.data)\r\n            .catch(error => {\r\n                console.error(\"Error adding a new employee\", error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // Update an existing employee\r\n    updateEmployee(employeeId, employee) {\r\n        return axios.put(`${EMPLOYEE_BASE_REST_API_URL}/${employeeId}`, employee)\r\n            .then(response => response.data)\r\n            .catch(error => {\r\n                console.error(`Error updating employee with ID ${employeeId}`, error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // Delete an employee by ID\r\n    deleteEmployee(employeeId) {\r\n        return axios.delete(`${EMPLOYEE_BASE_REST_API_URL}/${employeeId}`)\r\n            .then(response => response.data)\r\n            .catch(error => {\r\n                console.error(`Error deleting employee with ID ${employeeId}`, error);\r\n                throw error;\r\n            });\r\n    }\r\n}\r\n\r\nexport default new EmpServices();\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,0BAA0B,GAAG,wCAAwC;AAE3E,MAAMC,WAAW,CAAC;EACd;EACAC,eAAeA,CAAA,EAAG;IACd,OAAOH,KAAK,CAACI,GAAG,CAACH,0BAA0B,CAAC,CACvCI,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/BC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,MAAMA,KAAK;IACf,CAAC,CAAC;EACV;;EAEA;EACAE,eAAeA,CAACC,UAAU,EAAE;IACxB,OAAOZ,KAAK,CAACI,GAAG,CAAC,GAAGH,0BAA0B,IAAIW,UAAU,EAAE,CAAC,CAC1DP,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/BC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,mCAAmCG,UAAU,EAAE,EAAEH,KAAK,CAAC;MACrE,MAAMA,KAAK;IACf,CAAC,CAAC;EACV;;EAEA;EACAI,WAAWA,CAACC,QAAQ,EAAE;IAClB,OAAOd,KAAK,CAACe,IAAI,CAACd,0BAA0B,EAAEa,QAAQ,CAAC,CAClDT,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/BC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACf,CAAC,CAAC;EACV;;EAEA;EACAO,cAAcA,CAACJ,UAAU,EAAEE,QAAQ,EAAE;IACjC,OAAOd,KAAK,CAACiB,GAAG,CAAC,GAAGhB,0BAA0B,IAAIW,UAAU,EAAE,EAAEE,QAAQ,CAAC,CACpET,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/BC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,mCAAmCG,UAAU,EAAE,EAAEH,KAAK,CAAC;MACrE,MAAMA,KAAK;IACf,CAAC,CAAC;EACV;;EAEA;EACAS,cAAcA,CAACN,UAAU,EAAE;IACvB,OAAOZ,KAAK,CAACmB,MAAM,CAAC,GAAGlB,0BAA0B,IAAIW,UAAU,EAAE,CAAC,CAC7DP,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/BC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,mCAAmCG,UAAU,EAAE,EAAEH,KAAK,CAAC;MACrE,MAAMA,KAAK;IACf,CAAC,CAAC;EACV;AACJ;AAEA,eAAe,IAAIP,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}